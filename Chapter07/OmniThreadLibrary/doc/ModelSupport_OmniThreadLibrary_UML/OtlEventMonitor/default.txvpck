<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="199c9q0wsrmy3e3jf_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniMonitorTaskEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.Monitor" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.cemMonitor" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.cemMonitor" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.cemRefCount" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.Create(OtlEventMonitor.TOmniEventMonitor)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.Destroy()" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.Allocate()" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.Release()" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.Monitor" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniCountedEventMonitor.RefCount" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniMonitorTaskMessageEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniMonitorPoolWorkItemEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.MonitorClass" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.empMonitorClass" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.empListLock" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.empMonitorClass" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.empMonitorList" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.Create()" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.Destroy()" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.Allocate()" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.Release(OtlEventMonitor.TOmniEventMonitor)" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorPool.MonitorClass" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniMonitorPoolThreadEvent">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolThreadCreated" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnTaskTerminated" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnTaskUndeliveredMessage" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnTaskMessage" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolWorkItemEvent" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolThreadKilled" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolThreadDestroying" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolThreadCreated" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnTaskUndeliveredMessage" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnTaskTerminated" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnTaskMessage" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolWorkItemCompleted" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolThreadKilled" />
      <reference referencedUin="delphi:l_ast:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolThreadDestroying" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emMessageWindow" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emMonitoredPools" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emMonitoredTasks" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolThreadCreated" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolThreadDestroying" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolThreadKilled" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnPoolWorkItemEvent" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnTaskMessage" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnTaskUndeliveredMessage" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emOnTaskTerminated" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.emCurrentMsg" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.WndProc(ref@Winapi.Messages.TMessage)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.Create(System.Classes.TComponent)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.Destroy()" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.Detach(OtlTaskControl.IOmniTaskControl)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.Detach(OtlThreadPool.IOmniThreadPool)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.Monitor(OtlTaskControl.IOmniTaskControl)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.Monitor(OtlThreadPool.IOmniThreadPool)" />
      <reference referencedUin="delphi:e_method:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.ProcessMessages()" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.MessageWindow" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolThreadCreated" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolThreadDestroying" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolThreadKilled" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnPoolWorkItemCompleted" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnTaskMessage" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnTaskTerminated" />
      <reference referencedUin="delphi:e_property:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitor.OnTaskUndeliveredMessage" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.@unitclass">
      <property name="$shortcutReference" value="true" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.@unitclass.COmniTaskMsg_NewMessage" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.@unitclass.COmniTaskMsg_Terminated" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.@unitclass.COmniPoolMsg" />
      <reference referencedUin="delphi:e_field:src:OmniThreadLibrary_UML:OtlEventMonitor.@unitclass.CMaxReceiveLoop_ms" />
    </reference>
    <reference referencedUin="delphi:e_class:src:OmniThreadLibrary_UML:OtlEventMonitor.TOmniEventMonitorClass">
      <property name="$shortcutReference" value="true" />
    </reference>
  </view>
</nodeSet>